# Main config for workflows that will be conditionally run according to the parameters set at the initial config.yml. Only runs builds for paths that are changed.
# Also contains workflows that will be run on all branches such as node tests
version: 2.1

orbs:
  codecov: codecov/codecov@4.2.0
  gcp-cli: circleci/gcp-cli@3.3.1

## Commands via the gcp-cli orb to authenticate with GCP
# From https://github.com/jtreutel/circleci-gcp-oidc-test/blob/master/.circleci/config.yml
# And from the tutorial https://circleci.com/blog/openid-connect-identity-tokens/
commands:
  gcp-oidc-generate-cred-config-file:
    description: "Authenticate with GCP using a CircleCI OIDC token."
    parameters:
      gcp_cred_config_file_path: 
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path: 
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          name: "Generate OIDC Token, Authentiace and save the gcp credential file"
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/1019539084286/locations/global/workloadIdentityPools/circleci/providers/ethereum-org-circleci"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account=sourcify-cloud-run-deployer@sourcify-project.iam.gserviceaccount.com \
                --credential-source-file=<< parameters.oidc_token_file_path >>

  gcp-oidc-authenticate:
    description: "Authenticate with GCP using a GCP credentials file."
    parameters:
      gcp_cred_config_file_path: 
        type: string
        default: /home/circleci/gcp_cred_config.json
    steps:
      - run:
          name: "Authenticate with GCP using the GCP credentials file"
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            # Configure ADC
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a $BASH_ENV

# Pipeline parameters to run module builds if related files have been changed
parameters:
  run-build-server:
    type: boolean
    default: false
  run-build-monitor:
    type: boolean
    default: false
  run-build-packages:
    type: boolean
    default: false

################
### ALIASES ####
################
aliases:
  - &build-base
    docker:
      - image: cimg/base:2024.07
    resource_class: large
    parameters:
      run-build:
        type: boolean
        default: false
      run-build-2:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - run:
          name: Build and push docker images
          command: |
            ./.circleci/scripts/build_and_publish_docker_images.sh
      - persist_to_workspace:
          root: workspace
          paths:
            - ./*
      # If no build is needed, echo 0 to run as success
      - run: echo 0
  - &build-base-arm64
    <<: *build-base
    resource_class: arm.large # override resource class
  - &monitor-e2e-base
    steps:
      - run:
          name: Avoid hosts unknown for github
          command: mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run:
          name: checkout metacoin-source-verify
          command: cd ~/project && git clone git@github.com:sourcifyeth/metacoin-source-verify.git
      - run:
          name: install
          command: cd ~/project/metacoin-source-verify && npm ci
      - run:
          name: monitor test
          command: cd ~/project/metacoin-source-verify && ./scripts/monitor_e2e.sh
          no_output_timeout: 30m
    docker:
      - image: cimg/node:22.5.1
    resource_class: small
  - &verification-e2e-base
    steps:
      - run:
          name: Avoid hosts unknown for github
          command: mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run:
          name: checkout metacoin-source-verify
          command: cd ~/project && git clone git@github.com:sourcifyeth/metacoin-source-verify.git
      - run:
          name: install
          command: cd ~/project/metacoin-source-verify && npm ci
      - run:
          name: verification test
          command: cd ~/project/metacoin-source-verify && ./scripts/verification_e2e.sh
    docker:
      - image: cimg/node:22.5.1
    resource_class: small
####################
#### WORKFLOWS #####
####################
workflows:
  build_publish_deploy_docker:
    # Run build_publish_deploy when on staging or master AND when a module is changed and something needs to be built and deployed.
    when:
      # and:
      or:
        - equal: [master, << pipeline.git.branch >>]
        - equal: [staging, << pipeline.git.branch >>]
        # - or:
        #     [
        #       << pipeline.parameters.run-build-server >>,
        #       << pipeline.parameters.run-build-monitor >>,
        #       << pipeline.parameters.run-build-packages >>,
        #       << pipeline.parameters.run-build-ui >>,
        #     ]
    jobs:
      - tests-node-v22
      - build-push-monitor-amd64:
          run-build: << pipeline.parameters.run-build-monitor >>
          run-build-2: << pipeline.parameters.run-build-packages >> # monitor depends on packages
      - build-push-server-amd64:
          run-build: << pipeline.parameters.run-build-server >>
          run-build-2: << pipeline.parameters.run-build-packages >> # server depends on packages
      - build-push-monitor-arm64:
          run-build: << pipeline.parameters.run-build-monitor >>
          run-build-2: << pipeline.parameters.run-build-packages >> # monitor depends on packages
      - build-push-server-arm64:
          run-build: << pipeline.parameters.run-build-server >>
          run-build-2: << pipeline.parameters.run-build-packages >> # server depends on packages
      - publish-multiarch-images:
          requires:
            - build-push-monitor-amd64
            - build-push-server-amd64
            - build-push-monitor-arm64
            - build-push-server-arm64
      - deploy:
          requires:
            - publish-multiarch-images
      - monitor-e2e-sepolia:
          requires:
            - deploy
      - monitor-e2e-holesky:
          requires:
            - deploy
      - verification-e2e-sepolia:
          requires:
            - deploy
      - verification-e2e-holesky:
          requires:
            - deploy # Tests workflow for not staging or master
  tests:
    when:
      and:
        - not:
            equal: [master, << pipeline.git.branch >>]
        - not:
            equal: [staging, << pipeline.git.branch >>]
    jobs:
      - tests-node-v22

#######################
### JOB DEFINITIONS ###
#######################
jobs:
  build-push-monitor-amd64:
    <<: *build-base
    environment:
      SERVICE: "monitor"
      DOCKER_BUILD_CONTEXT: "."
      DOCKERFILE: "services/monitor/Dockerfile"
  build-push-server-amd64:
    <<: *build-base
    environment:
      SERVICE: "server"
      DOCKER_BUILD_CONTEXT: "."
      DOCKERFILE: "services/server/Dockerfile"
  # ARM64 builds
  build-push-monitor-arm64:
    <<: *build-base-arm64
    environment:
      SERVICE: "monitor"
      DOCKER_BUILD_CONTEXT: "."
      DOCKERFILE: "services/monitor/Dockerfile"
  build-push-server-arm64:
    <<: *build-base-arm64
    environment:
      SERVICE: "server"
      DOCKER_BUILD_CONTEXT: "."
      DOCKERFILE: "services/server/Dockerfile"
  publish-multiarch-images:
    docker:
      - image: cimg/base:2024.12
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          version: docker23
      - run:
          name: Publish multiarch images
          no_output_timeout: 5m
          command: |
            ./.circleci/scripts/publish_multiarch_images.sh
  deploy:
    executor: gcp-cli/default
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      # Deploy to GCP
      - gcp-cli/install
      - gcp-oidc-generate-cred-config-file
      - gcp-oidc-authenticate
      - run: 
          name: Deploy to GCP
          no_output_timeout: 10m
          command: |
            ./.circleci/scripts/deploy_to_gcp.sh
  tests-node-v22:
    docker:
      - image: cimg/node:22.5.1
      - image: postgres:16-alpine
        environment:
          POSTGRES_DB: sourcify
          POSTGRES_USER: sourcify
          POSTGRES_PASSWORD: sourcify
    resource_class: large
    working_directory: ~/sourcify
    parameters:
      run_coveralls:
        type: boolean
        default: false
    steps:
      - run:
          name: Versions
          command: npm version
      - checkout
      - run:
          name: install dependencies
          command: npm install
      - run:
          name: build
          command: npx lerna run build
      - run:
          name: lint
          command: npx lerna run lerna-lint
      - run:
          name: test
          command: npx lerna run lerna-test
          environment:
            DOCKER_HOST_POSTGRES_TEST_PORT: 5432
            SOURCIFY_POSTGRES_HOST: "localhost"
            SOURCIFY_POSTGRES_DB: "sourcify"
            SOURCIFY_POSTGRES_USER: "sourcify"
            SOURCIFY_POSTGRES_PASSWORD: "sourcify"
            SOURCIFY_POSTGRES_PORT: 5432
      - run:
          name: create lcov reports
          command: npx lerna run cov:lcov
      - codecov/upload
  monitor-e2e-sepolia:
    <<: *monitor-e2e-base
    environment:
      CHAIN_ID: "11155111"
      CHAIN_NAME: sepolia
  monitor-e2e-holesky:
    <<: *monitor-e2e-base
    environment:
      CHAIN_ID: "17000"
      CHAIN_NAME: holesky
  verification-e2e-sepolia:
    <<: *verification-e2e-base
    environment:
      CHAIN_ID: "11155111"
      CHAIN_NAME: sepolia
  verification-e2e-holesky:
    <<: *verification-e2e-base
    environment:
      CHAIN_ID: "17000"
      CHAIN_NAME: holesky
